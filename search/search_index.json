{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Twitter Growth Bot This is a project to automate the growth of money twitter accounts Colaboradores Name GitHub twitter Austin Whiterow \ud83c\udf0c awitherow @austin_witherow Fernando Ribeiro Aguilar fernand0aguilar @fernand0aguilar Contribute Send us a dm at twitter and we will help you with getting started with contributing to the project.","title":"Home"},{"location":"#twitter-growth-bot","text":"This is a project to automate the growth of money twitter accounts","title":"Twitter Growth Bot"},{"location":"#colaboradores","text":"Name GitHub twitter Austin Whiterow \ud83c\udf0c awitherow @austin_witherow Fernando Ribeiro Aguilar fernand0aguilar @fernand0aguilar","title":"Colaboradores"},{"location":"#contribute","text":"Send us a dm at twitter and we will help you with getting started with contributing to the project.","title":"Contribute"},{"location":"design_sprint/","text":"DESIGN SPRINT Intro Design Sprint is an agile methodology to conceive an idea in something tangible and testable. The methodology uses five steps, which are divided exactly into five days Phase 1: Unpack The first day of a Design Sprint is aimed at identifying and aligning the focus. It is when a problem is raised as a priority. And all participants contribute their information about it - it can be a technical problem, a need for iteration, a product failure etc. On the first day, the team applies techniques to carry out a survey of the scope of the project, discussing various topics and difficulties. We are converging to a single point of focus. Techniques can also be performed, such as 5w2h and SWOT. Phase 2: Sketch This phase is also similar to the traditional brainstorming, the difference being the focus on divergence . Instead of the team getting together to play and debate ideas, each participant is encouraged to seek solutions to the problem separately. Thus, the tendency is for everyone to analyze and solve the issue based on their professional background - without strings attached, without the fear of suggesting something. Only when the deadline ends will all the proposed ideas be brought together. On the second day, the group reaches a greater consensus on the theme defined for the project, each member is asked to make a draft in order to be able to make a final version, this draft can be a RichPicture. Phase 3: Decide This is the most critical day of the Design Sprin. You can't waste a lot of time debating all the proposed ideas. The focus needs to be on predicting the return of each suggestion in relation to the problem presented. And, of course, the feasibility of prototyping and testing the idea before the deadline. Phase 4: Prototype Once the idea is chosen, it's time to put it into practice. The purpose of a prototype is not to finish with a finished product (because it would be impossible in a day), but a representation of the proposed solution with medium to high fidelity. Phase 5: Test The last day of the week is reserved for testing, measuring, analyzing and learning from the designed prototype. At the end of the day, it is still possible to improve what worked and discard what is not relevant.","title":"Design Sprint"},{"location":"design_sprint/#design-sprint","text":"","title":"DESIGN SPRINT"},{"location":"design_sprint/#intro","text":"Design Sprint is an agile methodology to conceive an idea in something tangible and testable. The methodology uses five steps, which are divided exactly into five days","title":"Intro"},{"location":"design_sprint/#phase-1-unpack","text":"The first day of a Design Sprint is aimed at identifying and aligning the focus. It is when a problem is raised as a priority. And all participants contribute their information about it - it can be a technical problem, a need for iteration, a product failure etc. On the first day, the team applies techniques to carry out a survey of the scope of the project, discussing various topics and difficulties. We are converging to a single point of focus. Techniques can also be performed, such as 5w2h and SWOT.","title":"Phase 1: Unpack"},{"location":"design_sprint/#phase-2-sketch","text":"This phase is also similar to the traditional brainstorming, the difference being the focus on divergence . Instead of the team getting together to play and debate ideas, each participant is encouraged to seek solutions to the problem separately. Thus, the tendency is for everyone to analyze and solve the issue based on their professional background - without strings attached, without the fear of suggesting something. Only when the deadline ends will all the proposed ideas be brought together. On the second day, the group reaches a greater consensus on the theme defined for the project, each member is asked to make a draft in order to be able to make a final version, this draft can be a RichPicture.","title":"Phase 2: Sketch"},{"location":"design_sprint/#phase-3-decide","text":"This is the most critical day of the Design Sprin. You can't waste a lot of time debating all the proposed ideas. The focus needs to be on predicting the return of each suggestion in relation to the problem presented. And, of course, the feasibility of prototyping and testing the idea before the deadline.","title":"Phase 3: Decide"},{"location":"design_sprint/#phase-4-prototype","text":"Once the idea is chosen, it's time to put it into practice. The purpose of a prototype is not to finish with a finished product (because it would be impossible in a day), but a representation of the proposed solution with medium to high fidelity.","title":"Phase 4: Prototype"},{"location":"design_sprint/#phase-5-test","text":"The last day of the week is reserved for testing, measuring, analyzing and learning from the designed prototype. At the end of the day, it is still possible to improve what worked and discard what is not relevant.","title":"Phase 5: Test"},{"location":"methodology/","text":"Methodology To organize the project, agile methodologies were adopted. One of the used methods are Sprint Planning and Sprint Review. We will use this to track de advancement of the project. Sprint planning A Sprint planning document will be produced for the beggining of each Sprint. In the planning document, it will be shown: - Issues to be developed and those responsible - A meeting report containing the main decisions - Delivery dates - Any notes relevant Sprint Review A Sprint review document will be produced for the end of each Sprint. In the review document, it will be shown: - Issues delivered - Technical debts, if any - General observations on the result achieved - Link to recordings made, if any It's important to notice that we will hold meetings at the beginning and end of each sprint in order of maintaining the constant progress of the project. Estimating for a sprint, deciding on the sprint, and focusing on those objectives.","title":"Methodology"},{"location":"methodology/#methodology","text":"To organize the project, agile methodologies were adopted. One of the used methods are Sprint Planning and Sprint Review. We will use this to track de advancement of the project.","title":"Methodology"},{"location":"methodology/#sprint-planning","text":"A Sprint planning document will be produced for the beggining of each Sprint. In the planning document, it will be shown: - Issues to be developed and those responsible - A meeting report containing the main decisions - Delivery dates - Any notes relevant","title":"Sprint planning"},{"location":"methodology/#sprint-review","text":"A Sprint review document will be produced for the end of each Sprint. In the review document, it will be shown: - Issues delivered - Technical debts, if any - General observations on the result achieved - Link to recordings made, if any It's important to notice that we will hold meetings at the beginning and end of each sprint in order of maintaining the constant progress of the project. Estimating for a sprint, deciding on the sprint, and focusing on those objectives.","title":"Sprint Review"},{"location":"prototypes/","text":"Prototypes","title":"Prototypes"},{"location":"prototypes/#prototypes","text":"","title":"Prototypes"},{"location":"risk_plan/","text":"Risk Planning Introduction The purpose of this document is to explain how the risk analysis plan took place. The objective is to predict how all expected risks will be identified, quantified, qualified, maintained and controlled. In case something goes wrong in the process, we can go back at this document and choose which risks are we going to take in order to change the results. Analytical Structure of the Risks Description of each Items Project management Planning : related to planning, such as large tasks in short periods. Estimation : relate to estimation, such as errors in delivery prediction. Verify : related to the lack of action. Organizational Human Resources : communication or lack of parties involved. Prioritization : focus. The one thing. Productivity : the commitment of the development team Technical Requirements : Risks related to the requirements raised and the defined scope. Technology : Risks related to the technologies and tools used in the project. Infrastructure : One of the most critical points of risk management in software projects, as we usually forget to provide in advance the infrastructure where the software will run. It involves the whole question of architecture, definition of technology. External Market : Competition risks. Low user attraction, or evolution of the project in the market. Customer : It concerns the risks related to the customer, such as approval of the solution, good acceptance and adherence. Environment : The environment can influence team performance and product development. Remote work can carry several risks. Quality Functionality : Includes everything related to the functionality of the software. Usability : Usability encompasses all aspects related to the interface with ease and accessibility. Efficiency : Ensure that the is able to have the application's responses quickly and cohesively. Portability : Refers to which platforms / operating systems the software will run on and how the compatibility will be made. Response to problems planning Level Risk Action Solution 2 Difficulty with technologies Mitigate Study in advance and make changes according to the actual knowledge. 4 Error-inducing documentation Prevent Value the documentation phase and keep it updated, in addition to all members being aligned with the documents produced 6 Prioritization Error Prevent Set the priority and follow the documentation 8 Undefined scope Prevent Having the main features well defined and rely on them 6 Difficulty creating backlog Prevent Value the modeling phase and define backlog with all members 12 Bad practice in the development process Prevent Study and reinforce good programming practices 4 Team commitment Mitigate Encourage dailys, comments on PRs, trello and chat. 6 Lack of motivation Prevent Engage, show purpose and impact. Lead by example. Serve by your actions and responsibilities. Give both constructive and positive feedbacks 6 Team self-management problem Prevent Have well-defined meeting days and times, pairings and deliveries 8 Disagreements Prevent Respect members' time, opinion and limitations, be empathetic 8 Communication failure Mitigate Encourage dailys, comments on PRs, trello and chat 10 Poor time management Prevent Define deliveries and activities 6 Members' divergent schedules Mitigate Be flexible with respect to the schedule and tasks to be performed 9 Members' different nationalities and locations Mitigate Be flexible and work remotely. Use bitcoin and leverage taxes 9 Delay in deliveries Prevent Give priority to tasks, know how to split the sprint schedule 12 Task overload Prevent Alert about overbooked and make effort to work daily. Improve efficiency 9 Absence of tests Mitigate Organize and prioritize what needs testing most 6 Poor UI implementation Prevent Study UI and test all phases with user 8 Poor choice of technologies Prevent Studying technologies and making changes according to the defined necessities 12 Poorly defined architecture Prevent Study about architecture, validate with tech lead 12 Poorly defined process Prevent Study about processes and implement needed bureaucracy. 12 Application does not meet user expectations Prevent Test all phases with user, receiving feedbacks and responding to them 12 Low application adhesion Mitigate Advertise the app to our target audience. Market. Growth Hacking 12 Difficulty developing the application Mitigate Hire. Copy open source technologies 16 Absence of member (illness, grief, family assistance, others...) Accept Try to relocate tasks according to what happened 16 Unforeseen events with infrastructure (internet, energy, computer) Accept Communicate problem. Seek solution outside the box. 16 Failures and bugs Mitigate Most Urgent Tasks. Dedicate bug and refactoring issues. Act quickly","title":"Risk Analysis Plan"},{"location":"risk_plan/#risk-planning","text":"","title":"Risk Planning"},{"location":"risk_plan/#introduction","text":"The purpose of this document is to explain how the risk analysis plan took place. The objective is to predict how all expected risks will be identified, quantified, qualified, maintained and controlled. In case something goes wrong in the process, we can go back at this document and choose which risks are we going to take in order to change the results.","title":"Introduction"},{"location":"risk_plan/#analytical-structure-of-the-risks","text":"","title":"Analytical Structure of the Risks"},{"location":"risk_plan/#description-of-each-items","text":"","title":"Description of each Items"},{"location":"risk_plan/#project-management","text":"Planning : related to planning, such as large tasks in short periods. Estimation : relate to estimation, such as errors in delivery prediction. Verify : related to the lack of action.","title":"Project management"},{"location":"risk_plan/#organizational","text":"Human Resources : communication or lack of parties involved. Prioritization : focus. The one thing. Productivity : the commitment of the development team","title":"Organizational"},{"location":"risk_plan/#technical","text":"Requirements : Risks related to the requirements raised and the defined scope. Technology : Risks related to the technologies and tools used in the project. Infrastructure : One of the most critical points of risk management in software projects, as we usually forget to provide in advance the infrastructure where the software will run. It involves the whole question of architecture, definition of technology.","title":"Technical"},{"location":"risk_plan/#external","text":"Market : Competition risks. Low user attraction, or evolution of the project in the market. Customer : It concerns the risks related to the customer, such as approval of the solution, good acceptance and adherence. Environment : The environment can influence team performance and product development. Remote work can carry several risks.","title":"External"},{"location":"risk_plan/#quality","text":"Functionality : Includes everything related to the functionality of the software. Usability : Usability encompasses all aspects related to the interface with ease and accessibility. Efficiency : Ensure that the is able to have the application's responses quickly and cohesively. Portability : Refers to which platforms / operating systems the software will run on and how the compatibility will be made.","title":"Quality"},{"location":"risk_plan/#response-to-problems-planning","text":"Level Risk Action Solution 2 Difficulty with technologies Mitigate Study in advance and make changes according to the actual knowledge. 4 Error-inducing documentation Prevent Value the documentation phase and keep it updated, in addition to all members being aligned with the documents produced 6 Prioritization Error Prevent Set the priority and follow the documentation 8 Undefined scope Prevent Having the main features well defined and rely on them 6 Difficulty creating backlog Prevent Value the modeling phase and define backlog with all members 12 Bad practice in the development process Prevent Study and reinforce good programming practices 4 Team commitment Mitigate Encourage dailys, comments on PRs, trello and chat. 6 Lack of motivation Prevent Engage, show purpose and impact. Lead by example. Serve by your actions and responsibilities. Give both constructive and positive feedbacks 6 Team self-management problem Prevent Have well-defined meeting days and times, pairings and deliveries 8 Disagreements Prevent Respect members' time, opinion and limitations, be empathetic 8 Communication failure Mitigate Encourage dailys, comments on PRs, trello and chat 10 Poor time management Prevent Define deliveries and activities 6 Members' divergent schedules Mitigate Be flexible with respect to the schedule and tasks to be performed 9 Members' different nationalities and locations Mitigate Be flexible and work remotely. Use bitcoin and leverage taxes 9 Delay in deliveries Prevent Give priority to tasks, know how to split the sprint schedule 12 Task overload Prevent Alert about overbooked and make effort to work daily. Improve efficiency 9 Absence of tests Mitigate Organize and prioritize what needs testing most 6 Poor UI implementation Prevent Study UI and test all phases with user 8 Poor choice of technologies Prevent Studying technologies and making changes according to the defined necessities 12 Poorly defined architecture Prevent Study about architecture, validate with tech lead 12 Poorly defined process Prevent Study about processes and implement needed bureaucracy. 12 Application does not meet user expectations Prevent Test all phases with user, receiving feedbacks and responding to them 12 Low application adhesion Mitigate Advertise the app to our target audience. Market. Growth Hacking 12 Difficulty developing the application Mitigate Hire. Copy open source technologies 16 Absence of member (illness, grief, family assistance, others...) Accept Try to relocate tasks according to what happened 16 Unforeseen events with infrastructure (internet, energy, computer) Accept Communicate problem. Seek solution outside the box. 16 Failures and bugs Mitigate Most Urgent Tasks. Dedicate bug and refactoring issues. Act quickly","title":"Response to problems planning"},{"location":"requirements/5w2h/","text":"5W2H Why To build a profitable business with recurrent revenue while positively transforming lives. What Sell a SAAS (software as a service) and make it available for other people to use it. Sell courses on twitter (yoga/swe/etc courses) Where Advertise it on twitter. Initially use and scale the most on a single platform then go after other platforms. When Beggined development in Sep/2020. Seed Launch in October/2020 R2X and Semi-Internal Launch in between December/2020 and March/2020 Internal Launch in mid 2021 How Launch Formula How Much Costs Two part-time developers Advertisements costs Partnership costs Revenue MRR semi-passive income with saas 6x7 with high ticket courses sales","title":"5W2H"},{"location":"requirements/5w2h/#5w2h","text":"","title":"5W2H"},{"location":"requirements/5w2h/#why","text":"To build a profitable business with recurrent revenue while positively transforming lives.","title":"Why"},{"location":"requirements/5w2h/#what","text":"Sell a SAAS (software as a service) and make it available for other people to use it. Sell courses on twitter (yoga/swe/etc courses)","title":"What"},{"location":"requirements/5w2h/#where","text":"Advertise it on twitter. Initially use and scale the most on a single platform then go after other platforms.","title":"Where"},{"location":"requirements/5w2h/#when","text":"Beggined development in Sep/2020. Seed Launch in October/2020 R2X and Semi-Internal Launch in between December/2020 and March/2020 Internal Launch in mid 2021","title":"When"},{"location":"requirements/5w2h/#how","text":"Launch Formula","title":"How"},{"location":"requirements/5w2h/#how-much","text":"Costs Two part-time developers Advertisements costs Partnership costs Revenue MRR semi-passive income with saas 6x7 with high ticket courses sales","title":"How Much"},{"location":"requirements/brainstorming/","text":"Brainstorming Why Growing your Twitter Account is a really lucrative way to create potential passive income, increase networking opportunities and more. We could also sell the software as a service and make it available for other people to use it. There is a pretty successful market for selling Twitter Growth Hacking Guides ranging from $0-$50 per guide. Each guide has a lot of the same information, and regardless they continue to sell consistently. Making a twitter growth bot is a way to automate and increase the earning potential of our twitter accounts. We can repplicate automation tools such as hyperfury and buffer. And by making a system we can replicate the process and sell the solution to other accounts. What problem are we solving The main problem with these guides is that the implementation of the techniques in the guides is not always successful, and takes at least 1-3 hours of commitment per day to successfully grow your account to a size that will lead to success. Therefore, creating an automated solution is ideal, to help save time, and generate the results that people really want. All of the guides that are currently available can easily be synthesized into their simplest components, most of which can be automated. What are the main strengths an automated system would have The ultimate goal of this system is to grow our personal accounts. And also increase the potential of making several anonymous automated accounts that sell products atomatically. In order to successfully grow your twitter account, the main actions that are to be taken include, but are not limited to: Writing a lot of tweets Follow for Follow tactics Engagement focused on Big accounts in your niche, Like Minded individuals (tribe), Potential Clients","title":"Brainstorming"},{"location":"requirements/brainstorming/#brainstorming","text":"","title":"Brainstorming"},{"location":"requirements/brainstorming/#why","text":"Growing your Twitter Account is a really lucrative way to create potential passive income, increase networking opportunities and more. We could also sell the software as a service and make it available for other people to use it. There is a pretty successful market for selling Twitter Growth Hacking Guides ranging from $0-$50 per guide. Each guide has a lot of the same information, and regardless they continue to sell consistently. Making a twitter growth bot is a way to automate and increase the earning potential of our twitter accounts. We can repplicate automation tools such as hyperfury and buffer. And by making a system we can replicate the process and sell the solution to other accounts.","title":"Why"},{"location":"requirements/brainstorming/#what-problem-are-we-solving","text":"The main problem with these guides is that the implementation of the techniques in the guides is not always successful, and takes at least 1-3 hours of commitment per day to successfully grow your account to a size that will lead to success. Therefore, creating an automated solution is ideal, to help save time, and generate the results that people really want. All of the guides that are currently available can easily be synthesized into their simplest components, most of which can be automated.","title":"What problem are we solving"},{"location":"requirements/brainstorming/#what-are-the-main-strengths-an-automated-system-would-have","text":"The ultimate goal of this system is to grow our personal accounts. And also increase the potential of making several anonymous automated accounts that sell products atomatically. In order to successfully grow your twitter account, the main actions that are to be taken include, but are not limited to: Writing a lot of tweets Follow for Follow tactics Engagement focused on Big accounts in your niche, Like Minded individuals (tribe), Potential Clients","title":"What are the main strengths an automated system would have"},{"location":"requirements/interviews/","text":"Interviews","title":"Interviews"},{"location":"requirements/interviews/#interviews","text":"","title":"Interviews"},{"location":"requirements/mind_map/","text":"Mind Map","title":"MindMap"},{"location":"requirements/mind_map/#mind-map","text":"","title":"Mind Map"},{"location":"requirements/requirements_table/","text":"Requirements Table","title":"Elicited Requirements Table"},{"location":"requirements/requirements_table/#requirements-table","text":"","title":"Requirements Table"},{"location":"requirements/rich_picture/","text":"Rich Picture Part of the systems methodology, rich pictures provide a mechanism for learning about complex problems by drawing detailed representations of them RichPicture V02","title":"RichPicture"},{"location":"requirements/rich_picture/#rich-picture","text":"Part of the systems methodology, rich pictures provide a mechanism for learning about complex problems by drawing detailed representations of them","title":"Rich Picture"},{"location":"requirements/rich_picture/#richpicture-v02","text":"","title":"RichPicture V02"}]}